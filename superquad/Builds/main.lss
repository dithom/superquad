
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f0  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000404  008002f0  008002f0  000006aa  2**0
                  ALLOC
  3 .stab         00000df8  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000120b  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000026af  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  000026c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000117  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e2       	ldi	r30, 0x26	; 38
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 3f       	cpi	r26, 0xF0	; 240
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	26 e0       	ldi	r18, 0x06	; 6
  a0:	a0 ef       	ldi	r26, 0xF0	; 240
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 3f       	cpi	r26, 0xF4	; 244
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 92 01 	call	0x324	; 0x324 <main>
  b2:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z14lcdClearBufferv>:
}


void lcdClearBuffer() {
    
    memset(buffer, 0, bufferSize);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	94 e0       	ldi	r25, 0x04	; 4
  be:	e4 ef       	ldi	r30, 0xF4	; 244
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	df 01       	movw	r26, r30
  c4:	9c 01       	movw	r18, r24
  c6:	1d 92       	st	X+, r1
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <_Z14lcdClearBufferv+0xc>
  ce:	08 95       	ret

000000d0 <_Z16lcdHardwareResetv>:


void lcdHardwareReset() {
    
    //Hardware reset
    st7565_cs = 0;
  d0:	5d 98       	cbi	0x0b, 5	; 11
    st7565_rst = 0;
  d2:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	9e e1       	ldi	r25, 0x1E	; 30
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <_Z16lcdHardwareResetv+0xa>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z16lcdHardwareResetv+0x14>
  e4:	00 00       	nop
    _delay_ms(500);
    st7565_rst = 1;
  e6:	5e 9a       	sbi	0x0b, 6	; 11
  e8:	08 95       	ret

000000ea <_Z11lcdSendByteh>:


void lcdSendByte(uint8_t byte) {
    
    //Make sure clock starts high
    st7565_scl = 1;
  ea:	5c 9a       	sbi	0x0b, 4	; 11
  ec:	27 e0       	ldi	r18, 0x07	; 7
  ee:	30 e0       	ldi	r19, 0x00	; 0
    
    //Send byte from MSB to LSB
    for (int8_t i = 7; i >= 0; --i) {
        
        st7565_scl = 0;
        st7565_sda = (byte & (1 << i) ? 1 : 0); //noch nicht gecheckt...
  f0:	90 e0       	ldi	r25, 0x00	; 0
    st7565_scl = 1;
    
    //Send byte from MSB to LSB
    for (int8_t i = 7; i >= 0; --i) {
        
        st7565_scl = 0;
  f2:	5c 98       	cbi	0x0b, 4	; 11
        st7565_sda = (byte & (1 << i) ? 1 : 0); //noch nicht gecheckt...
  f4:	ac 01       	movw	r20, r24
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <_Z11lcdSendByteh+0x14>
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <_Z11lcdSendByteh+0x10>
 102:	40 fd       	sbrc	r20, 0
 104:	59 9a       	sbi	0x0b, 1	; 11
 106:	40 ff       	sbrs	r20, 0
 108:	59 98       	cbi	0x0b, 1	; 11
        st7565_scl = 1;
 10a:	5c 9a       	sbi	0x0b, 4	; 11
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
 110:	80 f7       	brcc	.-32     	; 0xf2 <_Z11lcdSendByteh+0x8>
    }
}
 112:	08 95       	ret

00000114 <_Z14lcdSendCommandh>:


void lcdSendCommand(uint8_t command) {
    
    //Set lcd to command mode
    st7565_a0 = 0;
 114:	5f 98       	cbi	0x0b, 7	; 11
    
    lcdSendByte(command);
 116:	0c 94 75 00 	jmp	0xea	; 0xea <_Z11lcdSendByteh>

0000011a <_Z11lcdSendDatah>:


void lcdSendData(uint8_t data) {
    
    //Set lcd to data mode
    st7565_a0 = 1;
 11a:	5f 9a       	sbi	0x0b, 7	; 11
    
    lcdSendByte(data);
 11c:	0c 94 75 00 	jmp	0xea	; 0xea <_Z11lcdSendByteh>

00000120 <_Z13lcdSendBufferv>:

//Holds current active font
Font activeFont;


void lcdSendBuffer() {
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	04 ef       	ldi	r16, 0xF4	; 244
 12c:	12 e0       	ldi	r17, 0x02	; 2
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	f8 2e       	mov	r15, r24
    
    //Iterate through pages
    for (uint8_t page = 0; page < 8; ++page) {
        
        lcdSendCommand(setPage | (7 - page));
 132:	8f 2d       	mov	r24, r15
 134:	80 6b       	ori	r24, 0xB0	; 176
 136:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
        lcdSendCommand(setColumnLower | (0x0 & 0xF));
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
        lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
        lcdSendCommand(rmw);
 146:	80 ee       	ldi	r24, 0xE0	; 224
 148:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	f8 01       	movw	r30, r16
 152:	ec 0f       	add	r30, r28
 154:	fd 1f       	adc	r31, r29
        
        //Iterate through columns per page
        for (uint8_t column = 0; column < 128; ++column) {
            
            lcdSendData(buffer[(128 * page) + column]);
 156:	80 81       	ld	r24, Z
 158:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11lcdSendDatah>
 15c:	21 96       	adiw	r28, 0x01	; 1
        lcdSendCommand(setColumnLower | (0x0 & 0xF));
        lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
        lcdSendCommand(rmw);
        
        //Iterate through columns per page
        for (uint8_t column = 0; column < 128; ++column) {
 15e:	c0 38       	cpi	r28, 0x80	; 128
 160:	d1 05       	cpc	r29, r1
 162:	b1 f7       	brne	.-20     	; 0x150 <_Z13lcdSendBufferv+0x30>
 164:	fa 94       	dec	r15
 166:	00 58       	subi	r16, 0x80	; 128
 168:	1f 4f       	sbci	r17, 0xFF	; 255


void lcdSendBuffer() {
    
    //Iterate through pages
    for (uint8_t page = 0; page < 8; ++page) {
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	f8 12       	cpse	r15, r24
 16e:	e1 cf       	rjmp	.-62     	; 0x132 <_Z13lcdSendBufferv+0x12>
        for (uint8_t column = 0; column < 128; ++column) {
            
            lcdSendData(buffer[(128 * page) + column]);
        }
    }
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	08 95       	ret

0000017c <_Z10lcdRefreshv>:
}


void lcdRefresh() {
    
    lcdSendBuffer();
 17c:	0c 94 90 00 	jmp	0x120	; 0x120 <_Z13lcdSendBufferv>

00000180 <_Z7lcdInitv>:


void lcdInit() {
    
    //Set lcd pins as outputs
    st7565_cs_ddr = output;
 180:	55 9a       	sbi	0x0a, 5	; 10
    st7565_rst_ddr = output;
 182:	56 9a       	sbi	0x0a, 6	; 10
    st7565_a0_ddr = output;
 184:	57 9a       	sbi	0x0a, 7	; 10
    st7565_scl_ddr = output;
 186:	54 9a       	sbi	0x0a, 4	; 10
    st7565_sda_ddr = output;
 188:	51 9a       	sbi	0x0a, 1	; 10
    
    st7565_cs = 1;
 18a:	5d 9a       	sbi	0x0b, 5	; 11
    st7565_rst = 1;
 18c:	5e 9a       	sbi	0x0b, 6	; 11
    st7565_a0 = 1;
 18e:	5f 9a       	sbi	0x0b, 7	; 11
    st7565_scl = 1;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    st7565_sda = 1;
 192:	59 9a       	sbi	0x0b, 1	; 11
    
    //Reset lcd
    lcdHardwareReset();
 194:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z16lcdHardwareResetv>
    
    //Configure lcd
    lcdSendCommand(setBias9);
 198:	82 ea       	ldi	r24, 0xA2	; 162
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setAdcNormal);
 19e:	80 ea       	ldi	r24, 0xA0	; 160
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setComNormal);
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setDispStartLine);
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setPowerControl | 0x04);
 1b0:	8c e2       	ldi	r24, 0x2C	; 44
 1b2:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
 1b6:	2f e3       	ldi	r18, 0x3F	; 63
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <_Z7lcdInitv+0x3c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_Z7lcdInitv+0x46>
 1c6:	00 00       	nop
    _delay_ms(50);
    lcdSendCommand(setPowerControl | 0x06);
 1c8:	8e e2       	ldi	r24, 0x2E	; 46
 1ca:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
 1ce:	2f e3       	ldi	r18, 0x3F	; 63
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <_Z7lcdInitv+0x54>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z7lcdInitv+0x5e>
 1de:	00 00       	nop
    _delay_ms(50);
    lcdSendCommand(setPowerControl | 0x07);
 1e0:	8f e2       	ldi	r24, 0x2F	; 47
 1e2:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
 1e6:	8f e4       	ldi	r24, 0x4F	; 79
 1e8:	93 ec       	ldi	r25, 0xC3	; 195
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <_Z7lcdInitv+0x6a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_Z7lcdInitv+0x70>
 1f0:	00 00       	nop
    _delay_ms(10);
    lcdSendCommand(setResistorRatio | 0x6);
 1f2:	86 e2       	ldi	r24, 0x26	; 38
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    
    //Turn on lcd
    lcdSendCommand(displayOn);
 1f8:	8f ea       	ldi	r24, 0xAF	; 175
 1fa:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setAllPtsNormal);
 1fe:	84 ea       	ldi	r24, 0xA4	; 164
 200:	0c 94 8a 00 	jmp	0x114	; 0x114 <_Z14lcdSendCommandh>

00000204 <_Z16lcdSetBrightnessh>:
}


void lcdSetBrightness(uint8_t value) {
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
    
    lcdSendCommand(setVolumeFirst);
 208:	81 e8       	ldi	r24, 0x81	; 129
 20a:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14lcdSendCommandh>
    lcdSendCommand(setVolumeSecond | (value & 0x3f));
 20e:	8c 2f       	mov	r24, r28
 210:	8f 73       	andi	r24, 0x3F	; 63
}
 212:	cf 91       	pop	r28


void lcdSetBrightness(uint8_t value) {
    
    lcdSendCommand(setVolumeFirst);
    lcdSendCommand(setVolumeSecond | (value & 0x3f));
 214:	0c 94 8a 00 	jmp	0x114	; 0x114 <_Z14lcdSendCommandh>

00000218 <_Z10lcdSetFont4Font>:
}


void lcdSetFont(Font font) {
    
    activeFont = font;
 218:	60 93 f0 02 	sts	0x02F0, r22
 21c:	70 93 f1 02 	sts	0x02F1, r23
 220:	80 93 f2 02 	sts	0x02F2, r24
 224:	90 93 f3 02 	sts	0x02F3, r25
 228:	08 95       	ret

0000022a <_Z12lcdDrawPixelhh>:
}


void lcdDrawPixel(uint8_t x, uint8_t y) {
    
    if (x >= 128 || y >= 64) {
 22a:	87 fd       	sbrc	r24, 7
 22c:	1a c0       	rjmp	.+52     	; 0x262 <_Z12lcdDrawPixelhh+0x38>
 22e:	60 34       	cpi	r22, 0x40	; 64
 230:	c0 f4       	brcc	.+48     	; 0x262 <_Z12lcdDrawPixelhh+0x38>
        
        return;
    } else {
        
        buffer[x + (y / 8) * 128] = (1 << (7 - (y % 8))); //noch nicht gecheckt...
 232:	96 2f       	mov	r25, r22
 234:	96 95       	lsr	r25
 236:	96 95       	lsr	r25
 238:	96 95       	lsr	r25
 23a:	e8 2f       	mov	r30, r24
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ec 50       	subi	r30, 0x0C	; 12
 240:	fd 4f       	sbci	r31, 0xFD	; 253
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	98 9f       	mul	r25, r24
 246:	e0 0d       	add	r30, r0
 248:	f1 1d       	adc	r31, r1
 24a:	11 24       	eor	r1, r1
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	60 95       	com	r22
 250:	70 95       	com	r23
 252:	67 70       	andi	r22, 0x07	; 7
 254:	77 27       	eor	r23, r23
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	01 c0       	rjmp	.+2      	; 0x25c <_Z12lcdDrawPixelhh+0x32>
 25a:	88 0f       	add	r24, r24
 25c:	6a 95       	dec	r22
 25e:	ea f7       	brpl	.-6      	; 0x25a <_Z12lcdDrawPixelhh+0x30>
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <_Z13lcdDrawColumnhh>:
}


void lcdDrawColumn(uint8_t page, uint8_t column) {
    
    if (page >= 8 || column >= 128) {
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	60 f4       	brcc	.+24     	; 0x280 <_Z13lcdDrawColumnhh+0x1c>
 268:	67 fd       	sbrc	r22, 7
 26a:	0a c0       	rjmp	.+20     	; 0x280 <_Z13lcdDrawColumnhh+0x1c>
        
        return;
    } else {
        
        buffer[page * 128 + column] = 0xFF; //wenn probleme vll |=
 26c:	90 e8       	ldi	r25, 0x80	; 128
 26e:	89 9f       	mul	r24, r25
 270:	f0 01       	movw	r30, r0
 272:	11 24       	eor	r1, r1
 274:	ec 50       	subi	r30, 0x0C	; 12
 276:	fd 4f       	sbci	r31, 0xFD	; 253
 278:	e6 0f       	add	r30, r22
 27a:	f1 1d       	adc	r31, r1
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
 280:	08 95       	ret

00000282 <_Z11lcdDrawCharhhh>:


void lcdDrawChar(uint8_t x, uint8_t y, uint8_t character) {
    
    //Offset from ASCI table to byte array
    uint16_t startPos = (character - 32) * activeFont.width;
 282:	70 91 f0 02 	lds	r23, 0x02F0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	40 52       	subi	r20, 0x20	; 32
 28a:	51 09       	sbc	r21, r1
 28c:	74 9f       	mul	r23, r20
 28e:	f0 01       	movw	r30, r0
 290:	75 9f       	mul	r23, r21
 292:	f0 0d       	add	r31, r0
 294:	11 24       	eor	r1, r1
    
    //Write character to buffer
    for (uint8_t i = 0; i < activeFont.width; ++i) {
        
        buffer[i + x + (y / 8) * 128] = activeFont.fontTable[startPos + i];
 296:	66 95       	lsr	r22
 298:	66 95       	lsr	r22
 29a:	66 95       	lsr	r22
 29c:	40 91 f2 02 	lds	r20, 0x02F2
 2a0:	50 91 f3 02 	lds	r21, 0x02F3
    
    //Offset from ASCI table to byte array
    uint16_t startPos = (character - 32) * activeFont.width;
    
    //Write character to buffer
    for (uint8_t i = 0; i < activeFont.width; ++i) {
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	4e 0f       	add	r20, r30
 2aa:	5f 1f       	adc	r21, r31
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	e0 e8       	ldi	r30, 0x80	; 128
 2b0:	6e 9f       	mul	r22, r30
 2b2:	80 0d       	add	r24, r0
 2b4:	91 1d       	adc	r25, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	8c 50       	subi	r24, 0x0C	; 12
 2ba:	9d 4f       	sbci	r25, 0xFD	; 253
 2bc:	27 17       	cp	r18, r23
 2be:	58 f4       	brcc	.+22     	; 0x2d6 <_Z11lcdDrawCharhhh+0x54>
 2c0:	fa 01       	movw	r30, r20
 2c2:	e2 0f       	add	r30, r18
 2c4:	f3 1f       	adc	r31, r19
        
        buffer[i + x + (y / 8) * 128] = activeFont.fontTable[startPos + i];
 2c6:	60 81       	ld	r22, Z
 2c8:	fc 01       	movw	r30, r24
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	60 83       	st	Z, r22
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	f3 cf       	rjmp	.-26     	; 0x2bc <_Z11lcdDrawCharhhh+0x3a>
    }
}
 2d6:	08 95       	ret

000002d8 <_Z13lcdDrawStringhhPKc>:


void lcdDrawString(uint8_t x, uint8_t y, const char* text) {
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	f6 2e       	mov	r15, r22
 2e4:	ea 01       	movw	r28, r20
    
    for (uint8_t i = 0; i < strlen(text); ++i) {
 2e6:	08 2f       	mov	r16, r24
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	21 2f       	mov	r18, r17
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	fe 01       	movw	r30, r28
 2f0:	01 90       	ld	r0, Z+
 2f2:	00 20       	and	r0, r0
 2f4:	e9 f7       	brne	.-6      	; 0x2f0 <_Z13lcdDrawStringhhPKc+0x18>
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	ec 1b       	sub	r30, r28
 2fa:	fd 0b       	sbc	r31, r29
 2fc:	2e 17       	cp	r18, r30
 2fe:	3f 07       	cpc	r19, r31
 300:	58 f4       	brcc	.+22     	; 0x318 <_Z13lcdDrawStringhhPKc+0x40>
        
        lcdDrawChar(x + i * 5, y, text[i]);
 302:	fe 01       	movw	r30, r28
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	40 81       	ld	r20, Z
 30a:	6f 2d       	mov	r22, r15
 30c:	80 2f       	mov	r24, r16
 30e:	0e 94 41 01 	call	0x282	; 0x282 <_Z11lcdDrawCharhhh>
}


void lcdDrawString(uint8_t x, uint8_t y, const char* text) {
    
    for (uint8_t i = 0; i < strlen(text); ++i) {
 312:	1f 5f       	subi	r17, 0xFF	; 255
 314:	0b 5f       	subi	r16, 0xFB	; 251
 316:	e9 cf       	rjmp	.-46     	; 0x2ea <_Z13lcdDrawStringhhPKc+0x12>
        
        lcdDrawChar(x + i * 5, y, text[i]);
    }
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	08 95       	ret

00000324 <main>:
#include "libs/st7565/include/fonts.h"


int main() {
    
    lcdInit();
 324:	0e 94 c0 00 	call	0x180	; 0x180 <_Z7lcdInitv>
    lcdClearBuffer();
 328:	0e 94 5d 00 	call	0xba	; 0xba <_Z14lcdClearBufferv>
}


void lcdRefresh() {
    
    lcdSendBuffer();
 32c:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
    lcdRefresh();
    lcdSetBrightness(20);
 330:	84 e1       	ldi	r24, 0x14	; 20
 332:	0e 94 02 01 	call	0x204	; 0x204 <_Z16lcdSetBrightnessh>
 336:	80 91 00 01 	lds	r24, 0x0100
 33a:	90 91 01 01 	lds	r25, 0x0101
 33e:	a0 91 02 01 	lds	r26, 0x0102
 342:	b0 91 03 01 	lds	r27, 0x0103
}


void lcdSetFont(Font font) {
    
    activeFont = font;
 346:	80 93 f0 02 	sts	0x02F0, r24
 34a:	90 93 f1 02 	sts	0x02F1, r25
 34e:	a0 93 f2 02 	sts	0x02F2, r26
 352:	b0 93 f3 02 	sts	0x02F3, r27
    lcdSetFont(font5x7);
    lcdDrawString(38, 20, "Button Test");
 356:	4f ed       	ldi	r20, 0xDF	; 223
 358:	52 e0       	ldi	r21, 0x02	; 2
 35a:	64 e1       	ldi	r22, 0x14	; 20
 35c:	86 e2       	ldi	r24, 0x26	; 38
 35e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
    lcdDrawString(3, 55, "0");
 362:	4b ee       	ldi	r20, 0xEB	; 235
 364:	52 e0       	ldi	r21, 0x02	; 2
 366:	67 e3       	ldi	r22, 0x37	; 55
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
    lcdDrawString(42, 55, "0");
 36e:	4b ee       	ldi	r20, 0xEB	; 235
 370:	52 e0       	ldi	r21, 0x02	; 2
 372:	67 e3       	ldi	r22, 0x37	; 55
 374:	8a e2       	ldi	r24, 0x2A	; 42
 376:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
    lcdDrawString(82, 55, "0");
 37a:	4b ee       	ldi	r20, 0xEB	; 235
 37c:	52 e0       	ldi	r21, 0x02	; 2
 37e:	67 e3       	ldi	r22, 0x37	; 55
 380:	82 e5       	ldi	r24, 0x52	; 82
 382:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
    lcdDrawString(120, 55, "0");
 386:	4b ee       	ldi	r20, 0xEB	; 235
 388:	52 e0       	ldi	r21, 0x02	; 2
 38a:	67 e3       	ldi	r22, 0x37	; 55
 38c:	88 e7       	ldi	r24, 0x78	; 120
 38e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
}


void lcdRefresh() {
    
    lcdSendBuffer();
 392:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
    lcdRefresh();
    
    //Set buttons as inputs
    button1_ddr = input;
 396:	27 98       	cbi	0x04, 7	; 4
    button2_ddr = input;
 398:	26 98       	cbi	0x04, 6	; 4
    button3_ddr = input;
 39a:	25 98       	cbi	0x04, 5	; 4
    button4_ddr = input;
 39c:	24 98       	cbi	0x04, 4	; 4
    
    //Set led as output
    led_ddr = output;
 39e:	23 9a       	sbi	0x04, 3	; 4
    
    //Enable internal pullups
    PORTB = 0xFF;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	85 b9       	out	0x05, r24	; 5
    
    //Turn off led
    led = 0;
 3a4:	2b 98       	cbi	0x05, 3	; 5
    
    //Check buttons
    while (1) {
        
        if (!button1) {
 3a6:	1f 99       	sbic	0x03, 7	; 3
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <main+0x8c>
            
            lcdDrawString(3, 55, "1");
 3aa:	4d ee       	ldi	r20, 0xED	; 237
 3ac:	52 e0       	ldi	r21, 0x02	; 2
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <main+0x90>
            lcdRefresh();
        } else {
            
            lcdDrawString(3, 55, "0");
 3b0:	4b ee       	ldi	r20, 0xEB	; 235
 3b2:	52 e0       	ldi	r21, 0x02	; 2
 3b4:	67 e3       	ldi	r22, 0x37	; 55
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
 3bc:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
            lcdRefresh();
        }
        
        if (!button2) {
 3c0:	1e 99       	sbic	0x03, 6	; 3
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <main+0xa6>
            
            lcdDrawString(42, 55, "1");
 3c4:	4d ee       	ldi	r20, 0xED	; 237
 3c6:	52 e0       	ldi	r21, 0x02	; 2
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <main+0xaa>
            lcdRefresh();
        } else {
            
            lcdDrawString(42, 55, "0");
 3ca:	4b ee       	ldi	r20, 0xEB	; 235
 3cc:	52 e0       	ldi	r21, 0x02	; 2
 3ce:	67 e3       	ldi	r22, 0x37	; 55
 3d0:	8a e2       	ldi	r24, 0x2A	; 42
 3d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
 3d6:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
            lcdRefresh();
        }
        
        if (!button3) {
 3da:	1d 99       	sbic	0x03, 5	; 3
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <main+0xc0>
            
            lcdDrawString(82, 55, "1");
 3de:	4d ee       	ldi	r20, 0xED	; 237
 3e0:	52 e0       	ldi	r21, 0x02	; 2
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <main+0xc4>
            lcdRefresh();
        } else {
            
            lcdDrawString(82, 55, "0");
 3e4:	4b ee       	ldi	r20, 0xEB	; 235
 3e6:	52 e0       	ldi	r21, 0x02	; 2
 3e8:	67 e3       	ldi	r22, 0x37	; 55
 3ea:	82 e5       	ldi	r24, 0x52	; 82
 3ec:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
 3f0:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
            lcdRefresh();
        }
        
        if (!button4) {
 3f4:	1c 99       	sbic	0x03, 4	; 3
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <main+0xda>
            
            lcdDrawString(120, 55, "1");
 3f8:	4d ee       	ldi	r20, 0xED	; 237
 3fa:	52 e0       	ldi	r21, 0x02	; 2
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <main+0xde>
            lcdRefresh();
        } else {
            
            lcdDrawString(120, 55, "0");
 3fe:	4b ee       	ldi	r20, 0xEB	; 235
 400:	52 e0       	ldi	r21, 0x02	; 2
 402:	67 e3       	ldi	r22, 0x37	; 55
 404:	88 e7       	ldi	r24, 0x78	; 120
 406:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z13lcdDrawStringhhPKc>
 40a:	0e 94 90 00 	call	0x120	; 0x120 <_Z13lcdSendBufferv>
            lcdRefresh();
        }
        
        if (!button1 || !button2 || !button3 || !button4) {
 40e:	1f 9b       	sbis	0x03, 7	; 3
 410:	06 c0       	rjmp	.+12     	; 0x41e <main+0xfa>
 412:	1e 9b       	sbis	0x03, 6	; 3
 414:	04 c0       	rjmp	.+8      	; 0x41e <main+0xfa>
 416:	1d 9b       	sbis	0x03, 5	; 3
 418:	02 c0       	rjmp	.+4      	; 0x41e <main+0xfa>
 41a:	1c 99       	sbic	0x03, 4	; 3
 41c:	c3 cf       	rjmp	.-122    	; 0x3a4 <main+0x80>
            
            led = 1;
 41e:	2b 9a       	sbi	0x05, 3	; 5
 420:	c2 cf       	rjmp	.-124    	; 0x3a6 <main+0x82>

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
