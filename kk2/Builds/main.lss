
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000400  00800100  00800100  00000376  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010af  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001f60  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	25 e0       	ldi	r18, 0x05	; 5
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  9c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <_Z14lcdClearBufferv>:
}


void lcdClearBuffer() {
    
    memset(buffer, 0, bufferSize);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	e0 e0       	ldi	r30, 0x00	; 0
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	df 01       	movw	r26, r30
  ae:	9c 01       	movw	r18, r24
  b0:	1d 92       	st	X+, r1
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <_Z14lcdClearBufferv+0xc>
  b8:	08 95       	ret

000000ba <_Z16lcdHardwareResetv>:


void lcdHardwareReset() {
    
    //Hardware reset
    st7565_cs = 0;
  ba:	5d 98       	cbi	0x0b, 5	; 11
    st7565_rst = 0;
  bc:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	9e e1       	ldi	r25, 0x1E	; 30
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <_Z16lcdHardwareResetv+0xa>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z16lcdHardwareResetv+0x14>
  ce:	00 00       	nop
    _delay_ms(500);
    st7565_rst = 1;
  d0:	5e 9a       	sbi	0x0b, 6	; 11
  d2:	08 95       	ret

000000d4 <_Z11lcdSendByteh>:


void lcdSendByte(uint8_t byte) {
    
    //Make sure clock starts high
    st7565_scl = 1;
  d4:	5c 9a       	sbi	0x0b, 4	; 11
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	30 e0       	ldi	r19, 0x00	; 0
    
    //Send byte from MSB to LSB
    for (int8_t i = 7; i >= 0; --i) {
        
        st7565_scl = 0;
        st7565_sda = (byte & (1 << i) ? 1 : 0); //noch nicht gecheckt...
  da:	90 e0       	ldi	r25, 0x00	; 0
    st7565_scl = 1;
    
    //Send byte from MSB to LSB
    for (int8_t i = 7; i >= 0; --i) {
        
        st7565_scl = 0;
  dc:	5c 98       	cbi	0x0b, 4	; 11
        st7565_sda = (byte & (1 << i) ? 1 : 0); //noch nicht gecheckt...
  de:	ac 01       	movw	r20, r24
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <_Z11lcdSendByteh+0x14>
  e4:	55 95       	asr	r21
  e6:	47 95       	ror	r20
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <_Z11lcdSendByteh+0x10>
  ec:	40 fd       	sbrc	r20, 0
  ee:	59 9a       	sbi	0x0b, 1	; 11
  f0:	40 ff       	sbrs	r20, 0
  f2:	59 98       	cbi	0x0b, 1	; 11
        st7565_scl = 1;
  f4:	5c 9a       	sbi	0x0b, 4	; 11
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	31 09       	sbc	r19, r1
  fa:	80 f7       	brcc	.-32     	; 0xdc <_Z11lcdSendByteh+0x8>
    }
}
  fc:	08 95       	ret

000000fe <_Z14lcdSendCommandh>:


void lcdSendCommand(uint8_t command) {
    
    //Set lcd to command mode
    st7565_a0 = 0;
  fe:	5f 98       	cbi	0x0b, 7	; 11
    
    lcdSendByte(command);
 100:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_Z11lcdSendByteh>

00000104 <_Z11lcdSendDatah>:


void lcdSendData(uint8_t data) {
    
    //Set lcd to data mode
    st7565_a0 = 1;
 104:	5f 9a       	sbi	0x0b, 7	; 11
    
    lcdSendByte(data);
 106:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_Z11lcdSendByteh>

0000010a <_Z13lcdSendBufferPh>:

//Display buffer with 1024 bytes (1 byte is one column in a page)
uint8_t buffer[bufferSize];


void lcdSendBuffer(uint8_t *buffer) {
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	f8 2e       	mov	r15, r24
    
    //Iterate through pages
    for (uint8_t page = 0; page < 8; ++page) {
        
        lcdSendCommand(setPage | (7 - page));
 11c:	8f 2d       	mov	r24, r15
 11e:	80 6b       	ori	r24, 0xB0	; 176
 120:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
        lcdSendCommand(setColumnLower | (0x0 & 0xF));
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
        lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
        lcdSendCommand(rmw);
 130:	80 ee       	ldi	r24, 0xE0	; 224
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
 136:	8e 01       	movw	r16, r28
        
        //Iterate through columns per page
        for (uint8_t column = 0; column < 128; ++column) {
 138:	e1 2c       	mov	r14, r1
            
            lcdSendData(buffer[(128 * page) + column]);
 13a:	f8 01       	movw	r30, r16
 13c:	81 91       	ld	r24, Z+
 13e:	8f 01       	movw	r16, r30
 140:	0e 94 82 00 	call	0x104	; 0x104 <_Z11lcdSendDatah>
        lcdSendCommand(setColumnLower | (0x0 & 0xF));
        lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
        lcdSendCommand(rmw);
        
        //Iterate through columns per page
        for (uint8_t column = 0; column < 128; ++column) {
 144:	e3 94       	inc	r14
 146:	f0 e8       	ldi	r31, 0x80	; 128
 148:	ef 12       	cpse	r14, r31
 14a:	f7 cf       	rjmp	.-18     	; 0x13a <_Z13lcdSendBufferPh+0x30>
 14c:	fa 94       	dec	r15
 14e:	c0 58       	subi	r28, 0x80	; 128
 150:	df 4f       	sbci	r29, 0xFF	; 255


void lcdSendBuffer(uint8_t *buffer) {
    
    //Iterate through pages
    for (uint8_t page = 0; page < 8; ++page) {
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	f8 12       	cpse	r15, r24
 156:	e2 cf       	rjmp	.-60     	; 0x11c <_Z13lcdSendBufferPh+0x12>
        for (uint8_t column = 0; column < 128; ++column) {
            
            lcdSendData(buffer[(128 * page) + column]);
        }
    }
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <_Z10lcdRefreshv>:
}


void lcdRefresh() {
    
    lcdSendBuffer(buffer);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_Z13lcdSendBufferPh>

0000016e <_Z7lcdInitv>:


void lcdInit() {
    
    //Set lcd pins as outputs
    st7565_cs_ddr = output;
 16e:	55 9a       	sbi	0x0a, 5	; 10
    st7565_rst_ddr = output;
 170:	56 9a       	sbi	0x0a, 6	; 10
    st7565_a0_ddr = output;
 172:	57 9a       	sbi	0x0a, 7	; 10
    st7565_scl_ddr = output;
 174:	54 9a       	sbi	0x0a, 4	; 10
    st7565_sda_ddr = output;
 176:	51 9a       	sbi	0x0a, 1	; 10
    
    st7565_cs = 1;
 178:	5d 9a       	sbi	0x0b, 5	; 11
    st7565_rst = 1;
 17a:	5e 9a       	sbi	0x0b, 6	; 11
    st7565_a0 = 1;
 17c:	5f 9a       	sbi	0x0b, 7	; 11
    st7565_scl = 1;
 17e:	5c 9a       	sbi	0x0b, 4	; 11
    st7565_sda = 1;
 180:	59 9a       	sbi	0x0b, 1	; 11
    
    //Reset lcd
    lcdHardwareReset();
 182:	0e 94 5d 00 	call	0xba	; 0xba <_Z16lcdHardwareResetv>
    
    //Configure lcd
    lcdSendCommand(setBias9);
 186:	82 ea       	ldi	r24, 0xA2	; 162
 188:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setAdcNormal);
 18c:	80 ea       	ldi	r24, 0xA0	; 160
 18e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setComNormal);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setDispStartLine);
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setPowerControl | 0x04);
 19e:	8c e2       	ldi	r24, 0x2C	; 44
 1a0:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
 1a4:	2f e3       	ldi	r18, 0x3F	; 63
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <_Z7lcdInitv+0x3c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z7lcdInitv+0x46>
 1b4:	00 00       	nop
    _delay_ms(50);
    lcdSendCommand(setPowerControl | 0x06);
 1b6:	8e e2       	ldi	r24, 0x2E	; 46
 1b8:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <_Z7lcdInitv+0x54>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z7lcdInitv+0x5e>
 1cc:	00 00       	nop
    _delay_ms(50);
    lcdSendCommand(setPowerControl | 0x07);
 1ce:	8f e2       	ldi	r24, 0x2F	; 47
 1d0:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
 1d4:	8f e4       	ldi	r24, 0x4F	; 79
 1d6:	93 ec       	ldi	r25, 0xC3	; 195
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z7lcdInitv+0x6a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z7lcdInitv+0x70>
 1de:	00 00       	nop
    _delay_ms(10);
    lcdSendCommand(setResistorRatio | 0x6);
 1e0:	86 e2       	ldi	r24, 0x26	; 38
 1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    
    //Turn on lcd
    lcdSendCommand(displayOn);
 1e6:	8f ea       	ldi	r24, 0xAF	; 175
 1e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setAllPtsNormal);
 1ec:	84 ea       	ldi	r24, 0xA4	; 164
 1ee:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_Z14lcdSendCommandh>

000001f2 <_Z16lcdSetBrightnessh>:
}


void lcdSetBrightness(uint8_t value) {
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24
    
    lcdSendCommand(setVolumeFirst);
 1f6:	81 e8       	ldi	r24, 0x81	; 129
 1f8:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14lcdSendCommandh>
    lcdSendCommand(setVolumeSecond | (value & 0x3f));
 1fc:	8c 2f       	mov	r24, r28
 1fe:	8f 73       	andi	r24, 0x3F	; 63
}
 200:	cf 91       	pop	r28


void lcdSetBrightness(uint8_t value) {
    
    lcdSendCommand(setVolumeFirst);
    lcdSendCommand(setVolumeSecond | (value & 0x3f));
 202:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_Z14lcdSendCommandh>

00000206 <_Z12lcdDrawPixelhh>:
}


void lcdDrawPixel(uint8_t x, uint8_t y) {
    
    if (x >= 128 || y >= 64) {
 206:	87 fd       	sbrc	r24, 7
 208:	1a c0       	rjmp	.+52     	; 0x23e <_Z12lcdDrawPixelhh+0x38>
 20a:	60 34       	cpi	r22, 0x40	; 64
 20c:	c0 f4       	brcc	.+48     	; 0x23e <_Z12lcdDrawPixelhh+0x38>
        
        return;
    } else {
        
        buffer[x + (y / 8) * 128] = (1 << (7 - (y % 8))); //noch nicht gecheckt...
 20e:	96 2f       	mov	r25, r22
 210:	96 95       	lsr	r25
 212:	96 95       	lsr	r25
 214:	96 95       	lsr	r25
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	98 9f       	mul	r25, r24
 222:	e0 0d       	add	r30, r0
 224:	f1 1d       	adc	r31, r1
 226:	11 24       	eor	r1, r1
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	60 95       	com	r22
 22c:	70 95       	com	r23
 22e:	67 70       	andi	r22, 0x07	; 7
 230:	77 27       	eor	r23, r23
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <_Z12lcdDrawPixelhh+0x32>
 236:	88 0f       	add	r24, r24
 238:	6a 95       	dec	r22
 23a:	ea f7       	brpl	.-6      	; 0x236 <_Z12lcdDrawPixelhh+0x30>
 23c:	80 83       	st	Z, r24
 23e:	08 95       	ret

00000240 <_Z13lcdDrawColumnhh>:
}


void lcdDrawColumn(uint8_t page, uint8_t column) {
    
    if (page >= 8 || column >= 128) {
 240:	88 30       	cpi	r24, 0x08	; 8
 242:	60 f4       	brcc	.+24     	; 0x25c <_Z13lcdDrawColumnhh+0x1c>
 244:	67 fd       	sbrc	r22, 7
 246:	0a c0       	rjmp	.+20     	; 0x25c <_Z13lcdDrawColumnhh+0x1c>
        
        return;
    } else {
        
        buffer[page * 128 + column] = 0xFF; //wenn probleme vll |=
 248:	90 e8       	ldi	r25, 0x80	; 128
 24a:	89 9f       	mul	r24, r25
 24c:	f0 01       	movw	r30, r0
 24e:	11 24       	eor	r1, r1
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	e6 0f       	add	r30, r22
 256:	f1 1d       	adc	r31, r1
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	80 83       	st	Z, r24
 25c:	08 95       	ret

0000025e <main>:
#include "libs/st7565/st7565.cpp" //header einbinden


int main() {
    
    lcdInit();
 25e:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z7lcdInitv>
    lcdClearBuffer();
 262:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z14lcdClearBufferv>
    lcdRefresh();
 266:	0e 94 b3 00 	call	0x166	; 0x166 <_Z10lcdRefreshv>
    lcdSetBrightness(25);
 26a:	89 e1       	ldi	r24, 0x19	; 25
 26c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z16lcdSetBrightnessh>
        lcdDrawColumn(floor(i / 128), i % 128);
        lcdRefresh();
        i++;
    }*/
    
    buffer[0] = 0x2c;
 270:	8c e2       	ldi	r24, 0x2C	; 44
 272:	80 93 00 01 	sts	0x0100, r24
    buffer[1] = 0x52;
 276:	82 e5       	ldi	r24, 0x52	; 82
 278:	80 93 01 01 	sts	0x0101, r24
    buffer[2] = 0x52;
 27c:	80 93 02 01 	sts	0x0102, r24
    buffer[3] = 0x3e;
 280:	9e e3       	ldi	r25, 0x3E	; 62
 282:	90 93 03 01 	sts	0x0103, r25
    
    buffer[8] = 0xfe;
 286:	3e ef       	ldi	r19, 0xFE	; 254
 288:	30 93 08 01 	sts	0x0108, r19
    buffer[9] = 0x22;
 28c:	92 e2       	ldi	r25, 0x22	; 34
 28e:	90 93 09 01 	sts	0x0109, r25
    buffer[10] = 0x22;
 292:	90 93 0a 01 	sts	0x010A, r25
    buffer[11] = 0x1c;
 296:	4c e1       	ldi	r20, 0x1C	; 28
 298:	40 93 0b 01 	sts	0x010B, r20
    
    buffer[16] = 0x3c;
 29c:	2c e3       	ldi	r18, 0x3C	; 60
 29e:	20 93 10 01 	sts	0x0110, r18
    buffer[17] = 0x42;
 2a2:	52 e4       	ldi	r21, 0x42	; 66
 2a4:	50 93 11 01 	sts	0x0111, r21
    buffer[18] = 0x42;
 2a8:	50 93 12 01 	sts	0x0112, r21
    buffer[19] = 0x24;
 2ac:	54 e2       	ldi	r21, 0x24	; 36
 2ae:	50 93 13 01 	sts	0x0113, r21
    
    buffer[24] = 0x1c;
 2b2:	40 93 18 01 	sts	0x0118, r20
    buffer[25] = 0x22;
 2b6:	90 93 19 01 	sts	0x0119, r25
    buffer[26] = 0x22;
 2ba:	90 93 1a 01 	sts	0x011A, r25
    buffer[27] = 0xfe;
 2be:	30 93 1b 01 	sts	0x011B, r19
    
    buffer[32] = 0x3c;
 2c2:	20 93 20 01 	sts	0x0120, r18
    buffer[33] = 0x52;
 2c6:	80 93 21 01 	sts	0x0121, r24
    buffer[34] = 0x52;
 2ca:	80 93 22 01 	sts	0x0122, r24
    buffer[35] = 0x34;
 2ce:	84 e3       	ldi	r24, 0x34	; 52
 2d0:	80 93 23 01 	sts	0x0123, r24

    lcdRefresh();
 2d4:	0e 94 b3 00 	call	0x166	; 0x166 <_Z10lcdRefreshv>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
