   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 113               	.global	_Z14lcdClearBufferv
 115               	_Z14lcdClearBufferv:
 117               	.Ltext1:
   1:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** #include "st7565.h"
   2:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** #include <string.h>
   3:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** #include "fonts.h"
   4:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
   5:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** //Display buffer with 1024 bytes (1 byte is one column in a page)
   6:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** uint8_t buffer[bufferSize];
   7:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
   8:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
   9:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendBuffer(uint8_t *buffer) {
  10:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  11:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Iterate through pages
  12:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     for (uint8_t page = 0; page < 8; ++page) {
  13:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
  14:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setPage | (7 - page));
  15:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setColumnLower | (0x0 & 0xF));
  16:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
  17:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(rmw);
  18:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
  19:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         //Iterate through columns per page
  20:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         for (uint8_t column = 0; column < 128; ++column) {
  21:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****             
  22:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****             lcdSendData(buffer[(128 * page) + column]);
  23:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         }
  24:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     }
  25:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  26:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  27:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  28:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdClearBuffer() {
 119               	.LM0:
 120               	.LFBB1:
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
  29:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  30:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     memset(buffer, 0, bufferSize);
 126               	.LM1:
 127 0000 80E0      		ldi r24,0
 128 0002 94E0      		ldi r25,lo8(4)
 129 0004 E0E0      		ldi r30,lo8(buffer)
 130 0006 F0E0      		ldi r31,hi8(buffer)
 131 0008 DF01      		movw r26,r30
 132 000a 9C01      		movw r18,r24
 133               		0:
 134 000c 1D92      		st X+,__zero_reg__
 135 000e 2150      		subi r18,1
 136 0010 3040      		sbci r19,0
 137 0012 01F4      		brne 0b
 138 0014 0895      		ret
 140               	.Lscope1:
 142               	.global	_Z16lcdHardwareResetv
 144               	_Z16lcdHardwareResetv:
  31:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  32:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  33:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  34:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdRefresh() {
  35:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  36:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendBuffer(buffer);
  37:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  38:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  39:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  40:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdHardwareReset() {
 146               	.LM2:
 147               	.LFBB2:
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
  41:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  42:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Hardware reset
  43:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_cs = 0;
 153               	.LM3:
 154 0016 5D98      		cbi 0xb,5
  44:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_rst = 0;
 156               	.LM4:
 157 0018 5E98      		cbi 0xb,6
 158               	.LBB14:
 159               	.LBB15:
 161               	.Ltext2:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 163               	.LM5:
 164 001a 2FE7      		ldi r18,lo8(1999999)
 165 001c 84E8      		ldi r24,hi8(1999999)
 166 001e 9EE1      		ldi r25,hlo8(1999999)
 167 0020 2150      		1: subi r18,1
 168 0022 8040      		sbci r24,0
 169 0024 9040      		sbci r25,0
 170 0026 01F4      		brne 1b
 171 0028 00C0      		rjmp .
 172 002a 0000      		nop
 173               	.LBE15:
 174               	.LBE14:
 176               	.Ltext3:
  45:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     _delay_ms(500);
  46:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_rst = 1;
 178               	.LM6:
 179 002c 5E9A      		sbi 0xb,6
 180 002e 0895      		ret
 182               	.Lscope2:
 185               	.global	_Z11lcdSendByteh
 187               	_Z11lcdSendByteh:
  47:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  48:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  49:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  50:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendByte(uint8_t byte) {
 189               	.LM7:
 190               	.LFBB3:
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 0 */
 194               	.L__stack_usage = 0
 195               	.LBB16:
  51:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  52:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Make sure clock starts high
  53:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_scl = 1;
 197               	.LM8:
 198 0030 5C9A      		sbi 0xb,4
 199 0032 27E0      		ldi r18,lo8(7)
 200 0034 30E0      		ldi r19,0
 201               	.LBB17:
  54:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  55:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Send byte from MSB to LSB
  56:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     for (int8_t i = 7; i >= 0; --i) {
  57:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
  58:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         st7565_scl = 0;
  59:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         st7565_sda = (byte & (1 << i) ? 1 : 0); //noch nicht gecheckt...
 203               	.LM9:
 204 0036 90E0      		ldi r25,0
 205               	.L5:
  58:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         st7565_scl = 0;
 207               	.LM10:
 208 0038 5C98      		cbi 0xb,4
 210               	.LM11:
 211 003a AC01      		movw r20,r24
 212 003c 022E      		mov r0,r18
 213 003e 00C0      		rjmp 2f
 214               		1:
 215 0040 5595      		asr r21
 216 0042 4795      		ror r20
 217               		2:
 218 0044 0A94      		dec r0
 219 0046 02F4      		brpl 1b
 220 0048 40FD      		sbrc r20,0
 221 004a 599A      		sbi 0xb,1
 222 004c 40FF      		sbrs r20,0
 223 004e 5998      		cbi 0xb,1
  60:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         st7565_scl = 1;
 225               	.LM12:
 226 0050 5C9A      		sbi 0xb,4
 227 0052 2150      		subi r18,1
 228 0054 3109      		sbc r19,__zero_reg__
 229 0056 00F4      		brcc .L5
 230               	/* epilogue start */
 231               	.LBE17:
 232               	.LBE16:
  61:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     }
  62:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
 234               	.LM13:
 235 0058 0895      		ret
 237               	.Lscope3:
 240               	.global	_Z14lcdSendCommandh
 242               	_Z14lcdSendCommandh:
  63:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  64:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  65:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendCommand(uint8_t command) {
 244               	.LM14:
 245               	.LFBB4:
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
  66:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  67:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Set lcd to command mode
  68:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_a0 = 0;
 251               	.LM15:
 252 005a 5F98      		cbi 0xb,7
  69:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  70:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendByte(command);
 254               	.LM16:
 255 005c 0C94 0000 		jmp _Z11lcdSendByteh
 257               	.Lscope4:
 260               	.global	_Z11lcdSendDatah
 262               	_Z11lcdSendDatah:
  71:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  72:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  73:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  74:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendData(uint8_t data) {
 264               	.LM17:
 265               	.LFBB5:
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
  75:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  76:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Set lcd to data mode
  77:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_a0 = 1;
 271               	.LM18:
 272 0060 5F9A      		sbi 0xb,7
  78:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  79:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendByte(data);
 274               	.LM19:
 275 0062 0C94 0000 		jmp _Z11lcdSendByteh
 277               	.Lscope5:
 280               	.global	_Z13lcdSendBufferPh
 282               	_Z13lcdSendBufferPh:
   9:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendBuffer(uint8_t *buffer) {
 284               	.LM20:
 285               	.LFBB6:
 286 0066 EF92      		push r14
 287 0068 FF92      		push r15
 288 006a 0F93      		push r16
 289 006c 1F93      		push r17
 290 006e CF93      		push r28
 291 0070 DF93      		push r29
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 6 */
 295               	.L__stack_usage = 6
 296 0072 EC01      		movw r28,r24
   9:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSendBuffer(uint8_t *buffer) {
 298               	.LM21:
 299 0074 87E0      		ldi r24,lo8(7)
 300 0076 F82E      		mov r15,r24
 301               	.L13:
 302               	.LBB18:
 303               	.LBB19:
  14:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setPage | (7 - page));
 305               	.LM22:
 306 0078 8F2D      		mov r24,r15
 307 007a 806B      		ori r24,lo8(-80)
 308 007c 0E94 0000 		call _Z14lcdSendCommandh
  15:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setColumnLower | (0x0 & 0xF));
 310               	.LM23:
 311 0080 80E0      		ldi r24,0
 312 0082 0E94 0000 		call _Z14lcdSendCommandh
  16:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(setColumnUpper | ((0x0 >> 4) & 0xF));
 314               	.LM24:
 315 0086 80E1      		ldi r24,lo8(16)
 316 0088 0E94 0000 		call _Z14lcdSendCommandh
  17:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         lcdSendCommand(rmw);
 318               	.LM25:
 319 008c 80EE      		ldi r24,lo8(-32)
 320 008e 0E94 0000 		call _Z14lcdSendCommandh
 321 0092 8E01      		movw r16,r28
 322               	.LBB20:
  20:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         for (uint8_t column = 0; column < 128; ++column) {
 324               	.LM26:
 325 0094 E12C      		mov r14,__zero_reg__
 326               	.L10:
  22:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****             lcdSendData(buffer[(128 * page) + column]);
 328               	.LM27:
 329 0096 F801      		movw r30,r16
 330 0098 8191      		ld r24,Z+
 331 009a 8F01      		movw r16,r30
 332 009c 0E94 0000 		call _Z11lcdSendDatah
  20:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         for (uint8_t column = 0; column < 128; ++column) {
 334               	.LM28:
 335 00a0 E394      		inc r14
 336 00a2 F0E8      		ldi r31,lo8(-128)
 337 00a4 EF12      		cpse r14,r31
 338 00a6 00C0      		rjmp .L10
 339 00a8 FA94      		dec r15
 340 00aa C058      		subi r28,-128
 341 00ac DF4F      		sbci r29,-1
 342               	.LBE20:
 343               	.LBE19:
  12:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     for (uint8_t page = 0; page < 8; ++page) {
 345               	.LM29:
 346 00ae 8FEF      		ldi r24,lo8(-1)
 347 00b0 F812      		cpse r15,r24
 348 00b2 00C0      		rjmp .L13
 349               	/* epilogue start */
 350               	.LBE18:
  25:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
 352               	.LM30:
 353 00b4 DF91      		pop r29
 354 00b6 CF91      		pop r28
 355 00b8 1F91      		pop r17
 356 00ba 0F91      		pop r16
 357 00bc FF90      		pop r15
 358 00be EF90      		pop r14
 359 00c0 0895      		ret
 364               	.Lscope6:
 366               	.global	_Z10lcdRefreshv
 368               	_Z10lcdRefreshv:
  34:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdRefresh() {
 370               	.LM31:
 371               	.LFBB7:
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 0 */
 375               	.L__stack_usage = 0
  36:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendBuffer(buffer);
 377               	.LM32:
 378 00c2 80E0      		ldi r24,lo8(buffer)
 379 00c4 90E0      		ldi r25,hi8(buffer)
 380 00c6 0C94 0000 		jmp _Z13lcdSendBufferPh
 382               	.Lscope7:
 384               	.global	_Z7lcdInitv
 386               	_Z7lcdInitv:
  80:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
  81:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  82:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
  83:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdInit() {
 388               	.LM33:
 389               	.LFBB8:
 390               	/* prologue: function */
 391               	/* frame size = 0 */
 392               	/* stack size = 0 */
 393               	.L__stack_usage = 0
  84:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  85:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Set lcd pins as outputs
  86:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_cs_ddr = output;
 395               	.LM34:
 396 00ca 559A      		sbi 0xa,5
  87:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_rst_ddr = output;
 398               	.LM35:
 399 00cc 569A      		sbi 0xa,6
  88:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_a0_ddr = output;
 401               	.LM36:
 402 00ce 579A      		sbi 0xa,7
  89:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_scl_ddr = output;
 404               	.LM37:
 405 00d0 549A      		sbi 0xa,4
  90:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_sda_ddr = output;
 407               	.LM38:
 408 00d2 519A      		sbi 0xa,1
  91:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  92:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_cs = 1;
 410               	.LM39:
 411 00d4 5D9A      		sbi 0xb,5
  93:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_rst = 1;
 413               	.LM40:
 414 00d6 5E9A      		sbi 0xb,6
  94:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_a0 = 1;
 416               	.LM41:
 417 00d8 5F9A      		sbi 0xb,7
  95:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_scl = 1;
 419               	.LM42:
 420 00da 5C9A      		sbi 0xb,4
  96:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     st7565_sda = 1;
 422               	.LM43:
 423 00dc 599A      		sbi 0xb,1
  97:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
  98:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Reset lcd
  99:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdHardwareReset();
 425               	.LM44:
 426 00de 0E94 0000 		call _Z16lcdHardwareResetv
 100:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
 101:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Configure lcd
 102:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setBias9);
 428               	.LM45:
 429 00e2 82EA      		ldi r24,lo8(-94)
 430 00e4 0E94 0000 		call _Z14lcdSendCommandh
 103:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setAdcNormal);
 432               	.LM46:
 433 00e8 80EA      		ldi r24,lo8(-96)
 434 00ea 0E94 0000 		call _Z14lcdSendCommandh
 104:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setComNormal);
 436               	.LM47:
 437 00ee 80EC      		ldi r24,lo8(-64)
 438 00f0 0E94 0000 		call _Z14lcdSendCommandh
 105:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setDispStartLine);
 440               	.LM48:
 441 00f4 80E4      		ldi r24,lo8(64)
 442 00f6 0E94 0000 		call _Z14lcdSendCommandh
 106:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setPowerControl | 0x04);
 444               	.LM49:
 445 00fa 8CE2      		ldi r24,lo8(44)
 446 00fc 0E94 0000 		call _Z14lcdSendCommandh
 447               	.LBB21:
 448               	.LBB22:
 450               	.Ltext4:
 452               	.LM50:
 453 0100 2FE3      		ldi r18,lo8(199999)
 454 0102 8DE0      		ldi r24,hi8(199999)
 455 0104 93E0      		ldi r25,hlo8(199999)
 456 0106 2150      		1: subi r18,1
 457 0108 8040      		sbci r24,0
 458 010a 9040      		sbci r25,0
 459 010c 01F4      		brne 1b
 460 010e 00C0      		rjmp .
 461 0110 0000      		nop
 462               	.LBE22:
 463               	.LBE21:
 465               	.Ltext5:
 107:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     _delay_ms(50);
 108:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setPowerControl | 0x06);
 467               	.LM51:
 468 0112 8EE2      		ldi r24,lo8(46)
 469 0114 0E94 0000 		call _Z14lcdSendCommandh
 470               	.LBB23:
 471               	.LBB24:
 473               	.Ltext6:
 475               	.LM52:
 476 0118 2FE3      		ldi r18,lo8(199999)
 477 011a 8DE0      		ldi r24,hi8(199999)
 478 011c 93E0      		ldi r25,hlo8(199999)
 479 011e 2150      		1: subi r18,1
 480 0120 8040      		sbci r24,0
 481 0122 9040      		sbci r25,0
 482 0124 01F4      		brne 1b
 483 0126 00C0      		rjmp .
 484 0128 0000      		nop
 485               	.LBE24:
 486               	.LBE23:
 488               	.Ltext7:
 109:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     _delay_ms(50);
 110:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setPowerControl | 0x07);
 490               	.LM53:
 491 012a 8FE2      		ldi r24,lo8(47)
 492 012c 0E94 0000 		call _Z14lcdSendCommandh
 493               	.LBB25:
 494               	.LBB26:
 496               	.Ltext8:
 498               	.LM54:
 499 0130 8FE4      		ldi r24,lo8(-15537)
 500 0132 93EC      		ldi r25,hi8(-15537)
 501 0134 0197      		1: sbiw r24,1
 502 0136 01F4      		brne 1b
 503 0138 00C0      		rjmp .
 504 013a 0000      		nop
 505               	.LBE26:
 506               	.LBE25:
 508               	.Ltext9:
 111:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     _delay_ms(10);
 112:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setResistorRatio | 0x6);
 510               	.LM55:
 511 013c 86E2      		ldi r24,lo8(38)
 512 013e 0E94 0000 		call _Z14lcdSendCommandh
 113:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
 114:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     //Turn on lcd
 115:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(displayOn);
 514               	.LM56:
 515 0142 8FEA      		ldi r24,lo8(-81)
 516 0144 0E94 0000 		call _Z14lcdSendCommandh
 116:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setAllPtsNormal);
 518               	.LM57:
 519 0148 84EA      		ldi r24,lo8(-92)
 520 014a 0C94 0000 		jmp _Z14lcdSendCommandh
 522               	.Lscope8:
 525               	.global	_Z16lcdSetBrightnessh
 527               	_Z16lcdSetBrightnessh:
 117:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
 118:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 119:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 120:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdSetBrightness(uint8_t value) {
 529               	.LM58:
 530               	.LFBB9:
 531 014e CF93      		push r28
 532               	/* prologue: function */
 533               	/* frame size = 0 */
 534               	/* stack size = 1 */
 535               	.L__stack_usage = 1
 536 0150 C82F      		mov r28,r24
 121:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
 122:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setVolumeFirst);
 538               	.LM59:
 539 0152 81E8      		ldi r24,lo8(-127)
 540 0154 0E94 0000 		call _Z14lcdSendCommandh
 123:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setVolumeSecond | (value & 0x3f));
 542               	.LM60:
 543 0158 8C2F      		mov r24,r28
 544 015a 8F73      		andi r24,lo8(63)
 545               	/* epilogue start */
 124:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
 547               	.LM61:
 548 015c CF91      		pop r28
 123:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     lcdSendCommand(setVolumeSecond | (value & 0x3f));
 550               	.LM62:
 551 015e 0C94 0000 		jmp _Z14lcdSendCommandh
 553               	.Lscope9:
 557               	.global	_Z12lcdDrawPixelhh
 559               	_Z12lcdDrawPixelhh:
 125:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 126:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 127:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdDrawPixel(uint8_t x, uint8_t y) {
 561               	.LM63:
 562               	.LFBB10:
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 0 */
 566               	.L__stack_usage = 0
 128:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
 129:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     if (x >= 128 || y >= 64) {
 568               	.LM64:
 569 0162 87FD      		sbrc r24,7
 570 0164 00C0      		rjmp .L17
 572               	.LM65:
 573 0166 6034      		cpi r22,lo8(64)
 574 0168 00F4      		brsh .L17
 130:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
 131:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         return;
 132:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     } else {
 133:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
 134:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         buffer[x + (y / 8) * 128] = (1 << (7 - (y % 8))); //noch nicht gecheckt...
 576               	.LM66:
 577 016a 962F      		mov r25,r22
 578 016c 9695      		lsr r25
 579 016e 9695      		lsr r25
 580 0170 9695      		lsr r25
 581 0172 E82F      		mov r30,r24
 582 0174 F0E0      		ldi r31,0
 583 0176 E050      		subi r30,lo8(-(buffer))
 584 0178 F040      		sbci r31,hi8(-(buffer))
 585 017a 80E8      		ldi r24,lo8(-128)
 586 017c 989F      		mul r25,r24
 587 017e E00D      		add r30,r0
 588 0180 F11D      		adc r31,r1
 589 0182 1124      		clr __zero_reg__
 590 0184 70E0      		ldi r23,0
 591 0186 6095      		com r22
 592 0188 7095      		com r23
 593 018a 6770      		andi r22,7
 594 018c 7727      		clr r23
 595 018e 81E0      		ldi r24,lo8(1)
 596 0190 00C0      		rjmp 2f
 597               		1:
 598 0192 880F      		lsl r24
 599               		2:
 600 0194 6A95      		dec r22
 601 0196 02F4      		brpl 1b
 602 0198 8083      		st Z,r24
 603               	.L17:
 604 019a 0895      		ret
 606               	.Lscope10:
 610               	.global	_Z13lcdDrawColumnhh
 612               	_Z13lcdDrawColumnhh:
 135:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     }
 136:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** }
 137:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 138:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** 
 139:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp **** void lcdDrawColumn(uint8_t page, uint8_t column) {
 614               	.LM67:
 615               	.LFBB11:
 616               	/* prologue: function */
 617               	/* frame size = 0 */
 618               	/* stack size = 0 */
 619               	.L__stack_usage = 0
 140:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     
 141:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     if (page >= 8 || column >= 128) {
 621               	.LM68:
 622 019c 8830      		cpi r24,lo8(8)
 623 019e 00F4      		brsh .L19
 625               	.LM69:
 626 01a0 67FD      		sbrc r22,7
 627 01a2 00C0      		rjmp .L19
 142:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
 143:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         return;
 144:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****     } else {
 145:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         
 146:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/libs/st7565/st7565.cpp ****         buffer[page * 128 + column] = 0xFF; //wenn probleme vll |=
 629               	.LM70:
 630 01a4 90E8      		ldi r25,lo8(-128)
 631 01a6 899F      		mul r24,r25
 632 01a8 F001      		movw r30,r0
 633 01aa 1124      		clr __zero_reg__
 634 01ac E050      		subi r30,lo8(-(buffer))
 635 01ae F040      		sbci r31,hi8(-(buffer))
 636 01b0 E60F      		add r30,r22
 637 01b2 F11D      		adc r31,__zero_reg__
 638 01b4 8FEF      		ldi r24,lo8(-1)
 639 01b6 8083      		st Z,r24
 640               	.L19:
 641 01b8 0895      		ret
 643               	.Lscope11:
 644               		.section	.text.startup,"ax",@progbits
 646               	.global	main
 648               	main:
 650               	.Ltext10:
   1:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include <stdio.h>
   2:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include <avr/io.h>
   3:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include <avr/interrupt.h>
   4:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include <util/delay.h>
   5:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include "ioConfig.h"
   6:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** #include "libs/st7565/st7565.cpp" //header einbinden
   7:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** 
   8:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** 
   9:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** int main() {
 652               	.LM71:
 653               	.LFBB12:
 654               	/* prologue: function */
 655               	/* frame size = 0 */
 656               	/* stack size = 0 */
 657               	.L__stack_usage = 0
  10:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  11:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     lcdInit();
 659               	.LM72:
 660 0000 0E94 0000 		call _Z7lcdInitv
  12:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     lcdClearBuffer();
 662               	.LM73:
 663 0004 0E94 0000 		call _Z14lcdClearBufferv
  13:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     lcdRefresh();
 665               	.LM74:
 666 0008 0E94 0000 		call _Z10lcdRefreshv
  14:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     lcdSetBrightness(25);
 668               	.LM75:
 669 000c 89E1      		ldi r24,lo8(25)
 670 000e 0E94 0000 		call _Z16lcdSetBrightnessh
  15:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** 
  16:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     //Column animation
  17:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     /*uint16_t i = 0;
  18:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  19:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     while (1) {
  20:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         
  21:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         if (i >= 1024) {
  22:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****             
  23:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****             i = 0;
  24:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         }
  25:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         
  26:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         lcdClearBuffer();
  27:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         lcdDrawColumn(floor(i / 128), i % 128);
  28:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         lcdRefresh();
  29:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****         i++;
  30:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     }*/
  31:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  32:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[0] = 0x2c;
 672               	.LM76:
 673 0012 8CE2      		ldi r24,lo8(44)
 674 0014 8093 0000 		sts buffer,r24
  33:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[1] = 0x52;
 676               	.LM77:
 677 0018 82E5      		ldi r24,lo8(82)
 678 001a 8093 0000 		sts buffer+1,r24
  34:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[2] = 0x52;
 680               	.LM78:
 681 001e 8093 0000 		sts buffer+2,r24
  35:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[3] = 0x3e;
 683               	.LM79:
 684 0022 9EE3      		ldi r25,lo8(62)
 685 0024 9093 0000 		sts buffer+3,r25
  36:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  37:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[8] = 0xfe;
 687               	.LM80:
 688 0028 3EEF      		ldi r19,lo8(-2)
 689 002a 3093 0000 		sts buffer+8,r19
  38:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[9] = 0x22;
 691               	.LM81:
 692 002e 92E2      		ldi r25,lo8(34)
 693 0030 9093 0000 		sts buffer+9,r25
  39:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[10] = 0x22;
 695               	.LM82:
 696 0034 9093 0000 		sts buffer+10,r25
  40:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[11] = 0x1c;
 698               	.LM83:
 699 0038 4CE1      		ldi r20,lo8(28)
 700 003a 4093 0000 		sts buffer+11,r20
  41:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  42:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[16] = 0x3c;
 702               	.LM84:
 703 003e 2CE3      		ldi r18,lo8(60)
 704 0040 2093 0000 		sts buffer+16,r18
  43:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[17] = 0x42;
 706               	.LM85:
 707 0044 52E4      		ldi r21,lo8(66)
 708 0046 5093 0000 		sts buffer+17,r21
  44:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[18] = 0x42;
 710               	.LM86:
 711 004a 5093 0000 		sts buffer+18,r21
  45:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[19] = 0x24;
 713               	.LM87:
 714 004e 54E2      		ldi r21,lo8(36)
 715 0050 5093 0000 		sts buffer+19,r21
  46:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  47:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[24] = 0x1c;
 717               	.LM88:
 718 0054 4093 0000 		sts buffer+24,r20
  48:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[25] = 0x22;
 720               	.LM89:
 721 0058 9093 0000 		sts buffer+25,r25
  49:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[26] = 0x22;
 723               	.LM90:
 724 005c 9093 0000 		sts buffer+26,r25
  50:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[27] = 0xfe;
 726               	.LM91:
 727 0060 3093 0000 		sts buffer+27,r19
  51:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     
  52:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[32] = 0x3c;
 729               	.LM92:
 730 0064 2093 0000 		sts buffer+32,r18
  53:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[33] = 0x52;
 732               	.LM93:
 733 0068 8093 0000 		sts buffer+33,r24
  54:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[34] = 0x52;
 735               	.LM94:
 736 006c 8093 0000 		sts buffer+34,r24
  55:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     buffer[35] = 0x34;
 738               	.LM95:
 739 0070 84E3      		ldi r24,lo8(52)
 740 0072 8093 0000 		sts buffer+35,r24
  56:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** 
  57:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp ****     lcdRefresh();
 742               	.LM96:
 743 0076 0E94 0000 		call _Z10lcdRefreshv
  58:/Users/Thomas/Documents/Projekte/XAVR/kk2/kk2/main.cpp **** }...
 745               	.LM97:
 746 007a 80E0      		ldi r24,0
 747 007c 90E0      		ldi r25,0
 748 007e 0895      		ret
 750               	.Lscope12:
 751               	.global	buffer
 752               		.section .bss
 755               	buffer:
 756 0000 0000 0000 		.zero	1024
 756      0000 0000 
 756      0000 0000 
 756      0000 0000 
 756      0000 0000 
 758               		.text
 760               	.Letext0:
 761               		.ident	"GCC: (GNU) 4.8.1"
 762               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:2      *ABS*:0000003e __SP_H__
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:3      *ABS*:0000003d __SP_L__
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:4      *ABS*:0000003f __SREG__
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:6      *ABS*:00000001 __zero_reg__
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:115    .text:00000000 _Z14lcdClearBufferv
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:755    .bss:00000000 buffer
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:144    .text:00000016 _Z16lcdHardwareResetv
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:187    .text:00000030 _Z11lcdSendByteh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:242    .text:0000005a _Z14lcdSendCommandh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:262    .text:00000060 _Z11lcdSendDatah
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:282    .text:00000066 _Z13lcdSendBufferPh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:368    .text:000000c2 _Z10lcdRefreshv
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:386    .text:000000ca _Z7lcdInitv
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:527    .text:0000014e _Z16lcdSetBrightnessh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:559    .text:00000162 _Z12lcdDrawPixelhh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:612    .text:0000019c _Z13lcdDrawColumnhh
/var/folders/lc/pptj05r562s5yh4lb_kcgwth0000gn/T//ccWvibHK.s:648    .text.startup:00000000 main

UNDEFINED SYMBOLS
__do_clear_bss
